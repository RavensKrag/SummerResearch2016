
# 1
task :pathwayA => :setup do
	puts "=== setup data"
	# search for relevant programs of study
	# (required to run #foo2)
	@env.foo1 [
		"Computer Science",
		"Information Technology",
		"Electrical Engineering",
		"Biology",
		"Psychology"
	]
end

# 5
task :pathwayB => :setup do
	# search catalog for even more data?
	deparments = ["CS", "BIOL", "CHEM", "PSYC"]
	@env.foo5(deparments)
end



# 1 2 3
task :pathway1 => :pathwayA do
	courses = @env.foo2("Computer Science, BS")
	
	@env.foo3()
	
	#  1  load degrees
	#  2  get courses from CS degree
	#  3  test certain classes, to make sure they parse (DEPRECIATED FUNCTION)
end

# 5 4
task :pathway2 => :setup do
	@env.foo5(["CS"])	
	@env.foo4()
	
	#  5  load courses by department code
	#  4  pick out a specific course by ID, fetch that data using CourseInfo object
end

# 1 6
task :pathway3 => :pathwayA do
	@env.foo6() # NOTE: foo6 not yet properly ported
	
	#  1  load degrees
	#  6  get full program requirements logic (more than just course dependencies)
end

# 1 5 7 8 10 9
task :pathway4 => [:pathwayA, :pathwayB] do
	#  1  load degrees
	#  5  load courses by department code
	#  7  scrape all links from overview of one degree. no degree requenments, just a dumb list.
	#  8  Backend dependency graph construction.
	# 10  visualization of graph
	#  9  queries on the graph
	 
	
	# TODO: cache 1 and 5 to speed up evaluation
	
	
	
	puts "=== run processing"
	
	[
		"Computer Science, BS",
		"Applied Computer Science, BS",
		"Biology, BA",
		"Biology, BS",
		"Psychology, BA"
	]
	
	# take one degree program, and walk the dependencies for all courses in the degree
	course_list = @env.foo7("Computer Science, BS")  # get all relevant courses
	class_dependencies = @env.foo8(course_list)      # construct all dependencies
	
	output_filepath = ""
	@env.foo10(class_dependencies, output_filepath)  # visualize the dependency graph
	
	
	# query: what is the chain of courses that lead up to this course? 
	@env.foo9(class_dependencies, "CS 465")
	# => [CS 367, ECE 301, CS 262, CS 211, CS 112, MATH 113, CS 101?]
	
	# TODO: This is actually not properly a list, it is a subgraph. Some dependencies do not lie along the main path. How do you display that information?
	# NOTE: "ECE 301" is the old name, IIRC
end

# 1 2 13
task :pathway5 => :pathwayA do
	#  1  load degrees
	#  2  get courses from CS degree
	# 13  fetch all courses in list, and write data to file (also return) (input: course structs)
	
	courses = @env.foo2("Computer Science, BS")
	
	
	puts "=== run processing"
	course_data = @env.foo13(courses)
end

# test course parsing with a couple of key examples
# (TODO: take extra data from foo3 and move into foo12 for more variety of data)
# 1 2 12 11
task :pathway6 => :pathwayA do
	#  1  load degrees
	#  2  get courses from CS degree
	# 12  encode sample course data as CatalogLink structs
	# 11  try to fetch data for courses listed. light debug info. can quickly indenitfy problems.
	
	courses = @env.foo2("Computer Science, BS")
	
	
	puts "=== run processing"
	
	courses = @env.foo12()
	course_data = @env.foo11(courses)
end

# test course parsing with a couple of key examples
# Test for different types of course description pages
# 1 2 12 14
task :pathway8 => :pathwayA do
	#  1  load degrees
	#  2  get courses from CS degree
	# 12  encode sample course data as CatalogLink structs
	# 14  try to fetch data for courses listed. verbose debug mode. basically everything you need.
	
	courses = @env.foo2("Computer Science, BS")
	
	
	puts "=== run processing"
	
	courses = @env.foo12()
	course_data = @env.foo14(courses)
end

# test all courses across various majors to make sure everything runs correctly
# uses foo11 to detect which courses have odd link formats
# 1 2 11
task :pathway7 => :pathwayA do	
	#  1  load degrees
	#  2  get courses from CS degree
	# 11  try to fetch data for courses listed. light debug info. can quickly indenitfy problems.
	
	puts "=== cycle through programs of study..."
	
	programs = [
		"Computer Science, BS",
		"Applied Computer Science, BS",
		"Biology, BA",
		"Biology, BS",
		"Psychology, BA"
	]
	programs.each do |degree_name|
		puts "=== Getting info for: #{degree_name}"
		courses = @env.foo2(degree_name)
		# If the program list has a weird link in it, then the foo2 will fail before reaching the end of the list
			# url = @env.degrees[degree_name]
			# course_list = degree_requirements(url)
			# puts "test"
		# failure occurs inside of degree_requiremnts
		
		puts "=== analyzing courses... "
		course_data = @env.foo11(courses)
	end
	
	# errors from: SummerResearch::CourseInfo#fetch
	# two other page formats:
		# +  new page format: attemps to give more structure using <p> to separate into sub-regions, but actually malformed
			# ^ seems to be for more recent courses? not really sure why the markup is different
		# +  Mason Core pages: Totally different pages, because these are not actually courses. They are "aliases" of sorts for entire lists of courses.
	
	
	
	# NOTE: perhaps not all majors work right now? so be careful of that too
	
	
	
	# NOTE: the following programs of study only use Type A or Type B catalog links
		# "Computer Science, BS",
		# "Biology, BA",
	# NOTE: the following programs of study are known to list courses with Type C catalog links
		# "Applied Computer Science, BS",
		# "Biology, BS",
		# "Psychology, BA"
end


# Now that we have the data, actually start to walk it and do something interesting with it.
# (actually, may want to just go back to pathway4 instead)
# precedesssor: pathway4
# 1 5 7 8
task :pathway9 => [:pathwayA, :pathwayB] do
	#  1  load degrees
	#  5  load courses by department code
	#  7  scrape all links from overview of one degree. no degree requenments, just a dumb list.
	#  8  Backend dependency graph construction.
	
	
	# TODO: cache 1 and 5 to speed up evaluation
	
	
	puts "=== run processing"
	
	
	# TODO: output data on different degrees to different folders.
	# probably need to restructure some other code, such that the output directory is configurable?
	
	[
		"Computer Science, BS",
		"Applied Computer Science, BS",
		"Biology, BA",
		"Biology, BS",
		"Psychology, BA"
	]
	
	# take one degree program, and walk the dependencies for all courses in the degree
	course_list = @env.foo7("Computer Science, BS")  # get all relevant courses
	class_dependencies = @env.foo8(course_list)      # construct all dependencies
	
	puts "============"
	
	
	# =====
	puts "Filtering courses..."
	better_list = 
		course_list.reject{  |course| course.id == "Mason Core" }
		           .uniq{  |a| a.id    }
		           .sort_by{  |a| a.id.split(' ').first   }
	
	puts "=== download individual course data..."
	course_info_list = better_list.collect do |x|
		print '.'
		SummerResearch::CourseInfo.new(x).fetch
	end
	
	SummerResearch::Utilities.write_to_file("./all_course_data.yaml", course_info_list.to_yaml)
	
	# could pull down *list* of all courses associated with a dept
	# if courses in a major have prereqs in that department?
	# (definitely don't actually pull down each and every course before filtering though...)
	
	# under the current pipeline, I think this is the only way to do things?
	# can't ask for a single class by course ID until you have a list of all courses by dept
	# (foo4 experiments with this, but currently does not except a parameter)
	
	# department_codes = better_list.collect{ |course| course.id.split(' ').first }.uniq
end

# must run pathway9 before this, but can't list as explict dependency,
# because I want to be able to run pathway9 and pathway10 in separate executions
# (kinda like caching?)
task :pathway10 => :setup do
	# @env is active in this block, but can't actually be meaningully used
	# bascially, you should only interact with the data from the yaml file in this block,
	# otherwise weird things will happen
	
	# TODO: this code, when completed, should be moved under foo8
	
	course_info_list = SummerResearch::Utilities.load_yaml_file("./all_course_data.yaml")
	
	
	puts "=== process data..."
	course_info_list.each do |course_info|
		puts "#{course_info.id} - #{course_info.title}"
		
		regexp = /(\p{L}+ \d+)/
		
		# Explict dependencies
		
		
		hard_deps =
			%w[Prerequisite(s) Corequisite(s)]
				.collect do |x|
					requirements = course_info[x]
					p requirements
					next unless requirements
					requirements.scan(regexp)
				end
				
		
		# "C or higher in CS 105; (COMM 100, and ENGH 302) or (HNRS 110 and HNRS 122, 130, 131, 230 or 240); junior standing (at least 60 credit hours)."
		# ERROR: can't deal with 'or 240'
		# ERROR: can't deal with 'at least 60 credit hours' => 'least 60'
		
		# "Grade of C or better in CS 310, 330, and 367."
		# ERROR: can't deal with 'CS 310, 330, and 367' => 'and 367'
		
		# CS 499 
		# Prerequisite(s): 60 credits and permission of instructor; specific prerequisites vary with nature of topic.
		
		# PHIL 371 - Philosophy of Natural Sciences
		# Prerequisite(s): "3 credits of philosophy, or permission of instructor"
		
		
		
		# "#{course} with grade of C or better"
		# "Minimum grade of C in #{course}"
		soft_deps = 
			if course_info["Notes"]
				# [0] PHYS 161
				# [1] PHYS
				# [2] 161
				
				# soft_deps = course_info["Notes"].scan(regexp).collect{ |matches| matches[0] }
				[] # pseudo-return empty array to stub this out
			else
				[] # if "Notes" attribute not set, return empty Array
			end
		
		
		# p hard_deps
		# p soft_deps
		dependencies = hard_deps + soft_deps
		
		
		p dependencies.flatten.compact.uniq
		puts "---------"
	end
end

# TODO: print list of courses for a degree, chunked by what sector they appear in in the Program of Study page. This, in conjunction with the dependency info printed in pathway10, can be used to generate visualizations.

task :pathway11 => :setup do
	
end



